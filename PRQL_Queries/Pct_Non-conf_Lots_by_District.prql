# =======================================
# Percentage of lot sizes that don't conform to the Ordinance
# Much trickiness was used to clean data:
# - Tweak up the zoning districts to make up for Vision errors
# - Properties in Rural district with addresses on state roads 
#   get 3 acre minimum (Orford, Dorchester,
#   East & North Thetford, Dartmouth College Highway)
# - Ignore condo's
# - Ignore parcels with lotsize = 0
# - Set "TooSmall" to 1 if < min. lot size
# =======================================

prql target:sql.sqlite

# dollars displays a numeric value as dollars with commas
let dollars = d -> s"""printf("$%,d",{d})"""

# pct computes the amount (percent) the new differs from old
let pct = o n -> 100.0*( n - o ) / o

# prtpct prints a floating point number with "%"
let prtpct = v -> s'printf("%1.1f%", {v})'

# sig_fig - print a value with n decimal places
# inserts comma for thousands/millions 
let sig_fig = v n -> s"printf('%,1.{n}f', {v})"

# isStateRoad == 1 if it's a state road
let isStateRoad = road -> case [
  road ~= "ORFORD " => 1,
  road ~= "DARTMOUTH COLLEGE" => 1,
  road ~= "DORCHESTER" => 1,
  road ~= "EAST THETFORD" => 1,
  road ~= "NORTH THETFORD" => 1,
  true => 0,
]
# Clean up zoning districts
# Returns two or three character district
let CleanZoningDistrict = zd -> case [
  zd == "ES" => "RD",
  zd == "R" => "RD",
  zd == "SFR" => "RD",
  zd == "URD" => "RD",
  zd == "LCD" => "LCD",
  zd == "CD" => "LCD",
  zd == "LDC" => "LCD",
  zd == "SD" => "RD",
  zd == "" => null,
  true => zd,
]
# SubDistrict distinguishes between on-state-road and not
# Take a two/three character district, return pleasing name
# Also might (but doesn't) distinguish between Lyme Center and Lyme Common
# Produces pleasing printable name
let SubDistrict = dist road -> case [
  dist == "RD" && road == 1 => "Rural-State Road",
  dist == "RD" && road == 0 => "Rural-Town Road",
  dist == "BD" => "Commercial",
  dist == "LCD" => "LymeCommon/Ctr",
  dist == "ELD" => "EastLyme",
  dist == "SKIWAY" => "Skiway",
  dist == "MFD" => "MtnForest",
  true => dist,
]
# Return current min lot size for a zoning district
let CurrentMinLotSize = zd -> case [
  zd == "LymeCommon/Ctr" => 1.0,
  zd == "Commercial" => 2.0,
  zd == "Skiway" => 2.0,
  zd == "Rural-State Road" => 3.0,
  zd == "Rural-Town Road" => 5.0,
  zd == "EastLyme" => 15.0,
  zd == "MtnForest" => 50.0,
  true => "?",
]

# Return current min lot size for a zoning district
let MinLotSize90Pct = zd -> case [
  zd == "LymeCommon/Ctr" => 0.35,
  zd == "Commercial" => 2.0,
  zd == "Skiway" => 2.0,
  zd == "Rural-State Road" => 1.0,
  zd == "Rural-Town Road" => 0.95,
  zd == "EastLyme" => 0.65,
  zd == "MtnForest" => 20.0,
  true => "?",
]
# ============ begin  query ==============
# Using scraped data version 14 from Vision
from sd=ScrapedData
filter (SD_Version == 14)
join side:left czd = CorrectedZoningDistrict (sd.SD_PID == czd.CZD_PID)

derive { StateRoad = isStateRoad sd.SD_Street_Address }

# Clean up districts
derive { District = CleanZoningDistrict sd.SD_Zoning_District }
derive { RealDistrict = District ?? czd.CZD_Actual }

# ZDistrict distinguishes between on-state-road and not
derive { ZDistrict = SubDistrict RealDistrict StateRoad }

# For each zoning district, add in the minimum lot size
derive { MinLot = CurrentMinLotSize ZDistrict }
# derive { MinLot = MinLotSize90Pct ZDistrict }

# "TooSmall" is boolean showing whether the lot is smaller than MinLotSize 
derive TooSmall = case [
    sd.SD_Lot_Size >= MinLot => 0,
    true => 1
  ]
# Ignore condo's and zero-size lots
filter !(sd.SD_Description ~= "CONDO")
filter (sd.SD_Lot_Size != 0)
# Pick the interesting columns
select {
  sd.SD_PID,
  sd.SD_Street_Address,
  # StateRoad,
  # sd.SD_Zoning_District,
  # RealDistrict,
  ZDistrict,
  MinLot,
  sd.SD_Lot_Size,
  TooSmall,
}
sort { ZDistrict, sd.SD_Lot_Size }

#
# ===== Comment out remainder to get list of all parcels =====
# ===== Remainder groups by zoning district              =====
#
group { ZDistrict } (
  aggregate {
    `Current min (ac)` = min MinLot,
    TotalAcres = (sig_fig (sum sd.SD_Lot_Size) 1),
    SmallParcels = sum TooSmall,
    TotalParcels = count this,
  }
)
# Compute the percent of small parcels vs all parcels
derive PctSmallParcels = (prtpct 100.0*SmallParcels/TotalParcels)
# Sort by zoning district
sort { `Current min (ac)` }

# ======== Results from April 2024 ==========
# ZDistrict	Current min (ac)	TotalAcres	SmallParcels	TotalParcels	PctSmallParcels
# LymeCommon/Ctr	1	468.5	62	147	42.20%
# Commercial	2	52	0	1	0.00%
# Skiway	2	619.8	0	4	0.00%
# Rural-State Road	3	4,252.10	57	178	32.00%
# Rural-Town Road	5	16,489.20	198	599	33.10%
# EastLyme	15	2,346.40	31	54	57.40%
# MtnForest	50	7,058.00	9	37	24.30%

# Acreage needed to achieve 90% conformity
# ZDistrict	Current min (ac)	TotalAcres	SmallParcels	TotalParcels	PctSmallParcels
# LymeCommon/Ctr	0.35	468.5	15	147	10.2%
# EastLyme	0.65	2,346.4	6	54	11.1%
# Rural-Town Road	0.95	16,489.2	63	599	10.5%
# Rural-State Road	1.0	4,252.1	18	178	10.1%
# Commercial	2.0	52.0	0	1	0.0%
# Skiway	2.0	619.8	0	4	0.0%
# MtnForest	20.0	7,058.0	4	37	10.8%